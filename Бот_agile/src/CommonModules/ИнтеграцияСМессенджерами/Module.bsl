#Область ПрограммныйИнтерфейс

Процедура TelegramGetUpdates() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Боты.Ссылка,
	|	Боты.Токен,
	|	ЕСТЬNULL(НастройкиИнтеграцииTelegram.Значение, 0) КАК update_id
	|ИЗ
	|	Справочник.Боты КАК Боты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИнтеграцииTelegram КАК НастройкиИнтеграцииTelegram
	|		ПО Боты.Ссылка = НастройкиИнтеграцииTelegram.Бот
	|		И НастройкиИнтеграцииTelegram.Настройка = ""update_id""
	|ГДЕ
	|	НЕ Боты.Токен = """"");
	
	ВыборкаНастроекБота = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНастроекБота.Следующий() Цикл
	
		Токен 					 = ВыборкаНастроекБота.Токен;
		НомерПервогоСообщения    =  ВыборкаНастроекБота.update_id + 1;
		АдресЗапроса = СтрШаблон("/bot%1/getUpdates?timeout=0&offset=%2", Токен, Формат(НомерПервогоСообщения, "ЧГ=0"));

		Ответ = КоннекторHTTP.GetJson("api.telegram.org" + АдресЗапроса);

		Если Ответ.ok И Ответ.result.Количество() > 0 Тогда
		
		// Сначала найду последнее сообщение и запишу его в регистр, только потом приступлю к анализу, 
		//чтобы не конфликтовать со след рег заданием и спокойно обрабатывать свою порцию
			ПоследнееСообщениеРезультата = Ответ.result[Ответ.result.Количество() - 1];
			update_id = ПоследнееСообщениеРезультата.update_id;
			ЗаписатьНомерПоследнегоСообщения(ВыборкаНастроекБота.Ссылка, update_id);

			Для Каждого Сообщение Из Ответ.result Цикл
			
				//@skip-warning
				ОбработатьСообщениеБоту(Сообщение, ВыборкаНастроекБота);
			
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Обработка сообщения боту
// см. https://core.telegram.org/bots/api#update. 
// 
// Параметры:
//  Сообщение - Структура:
//  	*callback_query - Структура - см. https://core.telegram.org/bots/api#callbackquery.
//  	*Message - Структура - см. https://core.telegram.org/bots/api#message
//  НастройкиБота - ВыборкаИзРезультатаЗапроса:
//	*Токен - Строка -  Токен бота Telegram
//	*update_id - Число -  Последнее сообщение
//	*Ссылка - СправочникСсылка.Боты -  
Процедура ОбработатьСообщениеБоту(Сообщение, НастройкиБота) Экспорт

	ЭтоНажатиеКнопки = Сообщение.Свойство("callback_query");
	
	Если ЭтоНажатиеКнопки Тогда
		Message = Сообщение.callback_query.Message;
	ИначеЕсли  Сообщение.Свойство("Message") Тогда
		Message = Сообщение.Message;
	КонецЕсли;
	
	Chat_id = Формат(Message.chat.id, "ЧГ=0");
	 
	Пользователь =ПользовательПоChatID(Chat_id);
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь  = СоздатьПользователя(Chat_id, Message.from, НастройкиБота.Токен);		
		Возврат;
	КонецЕсли;
	
	//TODO ЗначениеРеквизитаОбъекта или запрос
	КомандаПользователя = Пользователь.Команда;
	Если Не ЗначениеЗаполнено(КомандаПользователя) Тогда
		TelegramSendMessage(НастройкиБота.Токен,"Вам еще не назначена команда", Chat_id);
		Возврат;
	КонецЕсли;	
	
	//TODO ЗначениеРеквизитаОбъекта или запрос
	Активен = Пользователь.Активен;
	Если Не Активен Тогда
		TelegramSendMessage(НастройкиБота.Токен,"Доступ не активирован", Chat_id);
		Возврат;
	КонецЕсли;	
	
	Если ЭтоНажатиеКнопки Тогда
		MessageId = Message.message_id;
		ОбработатьНажатиеКнопки(НастройкиБота,Сообщение,chat_id,MessageId, Пользователь);
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадача = ТекущаяЗадачаПользователя(Пользователь);
	
	Если ТекущаяЗадача = Неопределено Тогда
		ОтправитьСписокТемДляВзаимодействий(НастройкиБота.Токен, Chat_id);
	Иначе
		ВыполнитьТекущуюЗадачу(ТекущаяЗадача, Message.text);
	КонецЕсли;
	
КонецПроцедуры

// Отправляет сообщение пользователю.
// 
// Параметры:
//  Токен - Строка - Токен бота
//  ТекстСообщения - Строка - 
//  Chat_id - Строка - Chat_id пользователя 
//  ДопПараметры - Структура - Доп параметры для отправки. Например, описание клавиатуры
Процедура TelegramSendMessage(Токен, ТекстСообщения, Chat_id, ДопПараметры = "") Экспорт
	
	СоединениеHTTP = Новый HTTPСоединение("api.telegram.org",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	АдресЗапроса = СтрШаблон("bot%1/sendMessage?chat_id=%2&text=%3%4",Токен,Chat_id, ТекстСообщения, ДопПараметры);
				
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса);

	СоединениеHTTP.Получить(ЗапросHTTP);
	
КонецПроцедуры

Процедура ОтправитьНапоминаниеОСтатусМитинге() Экспорт

	Запрос = Новый Запрос;
	//берем разработчиков без активного БП
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Пользователи.chat_id КАК chat_id,
		|	Команды.Бот,
		|	Боты.Токен
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.СтатусМитинг КАК СтатусМитинг
		|		ПО Пользователи.Ссылка = СтатусМитинг.Пользователь
		|		И (НАЧАЛОПЕРИОДА(СтатусМитинг.Дата, ДЕНЬ) = &Дата)
		|		И (НЕ СтатусМитинг.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Команды КАК Команды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Боты КАК Боты
		|			ПО Команды.Бот = Боты.Ссылка
		|		ПО Пользователи.Команда = Команды.Ссылка
		|ГДЕ
		|	Пользователи.Роль = ЗНАЧЕНИЕ(Перечисление.РолиПользователей.Разработчик)
		|	И Пользователи.Активен
		|	И СтатусМитинг.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		TelegramSendMessage(ВыборкаДетальныеЗаписи.Токен, "Пришло время Стендап ап митинга.", ВыборкаДетальныеЗаписи.chat_id); 
		БизнесПроцессОбъект = НовыйБизнесПроцессСтатусМитинг(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Бот);
		БизнесПроцессОбъект.Старт();
		 
	КонецЦикла;
	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Пользователь по chat ID.
// 
// Параметры:
//  Chat_id - Строка - Chat id пользователя
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи
Функция ПользовательПоChatID(Chat_id)
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.chat_id = &chat_id
	//|	И Пользователи.Активен
	|	И НЕ Пользователи.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("chat_id", Chat_id);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьНомерПоследнегоСообщения(Бот,update_id)

	РегистрМенеджер = РегистрыСведений.НастройкиИнтеграцииTelegram.СоздатьМенеджерЗаписи();
	РегистрМенеджер.Бот 	  = Бот;
	РегистрМенеджер.Настройка = "update_id";
	РегистрМенеджер.Значение  = update_id;
	РегистрМенеджер.Записать();
		
КонецПроцедуры

Функция СоздатьПользователя(Chat_id,MessageFrom, БотТокен)
	
	СпрОбъект = Справочники.Пользователи.СоздатьЭлемент();
	СпрОбъект.chat_id = Chat_id;
	
	//СпрОбъект.Наименование = СтрШаблон("%1 %2",MessageFrom.first_name, MessageFrom.last_name);
	
	СпрОбъект.Наименование = СтрШаблон("%1",MessageFrom.first_name);
	
	СпрОбъект.Роль = Перечисления.РолиПользователей.Разработчик;
	
	//rybakov - Добавил запись usrname
	СпрОбъект.username = MessageFrom.username;
	
	//rybakov
	//Добавим информацию о команде, по спискам приглашений
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Команды.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПриглашенияВКоманду.СрезПоследних КАК ПриглашенияВКомандуСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Команды КАК Команды
	|		ПО ПриглашенияВКомандуСрезПоследних.Команда = Команды.Ссылка
	|			И (Команды.Бот.Токен = &БотТокен)
	|ГДЕ
	|	ПриглашенияВКомандуСрезПоследних.username = &username ИЛИ ПриглашенияВКомандуСрезПоследних.username = ""@""+&username";
	
	Запрос.УстановитьПараметр("БотТокен", БотТокен);
	Запрос.УстановитьПараметр("username", MessageFrom.username);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СпрОбъект.Активен = Истина;
		СпрОбъект.Команда = Выборка.Ссылка;
		TelegramSendMessage(БотТокен, "Добро пожаловать. Пользователь зарегистрирован", Chat_id);
	Иначе
		TelegramSendMessage(БотТокен, "Добро пожаловать. Создана заявка на нового пользователя", Chat_id);
	КонецЕсли;
	
	СпрОбъект.Записать();
	
	возврат СпрОбъект.Ссылка;
	
КонецФункции

//Обработка нажатия inline кнопки
//Пример:
//{
//    "ok": true,
//    "result": [
//        {
//            "update_id": 452927286,
//            "callback_query": {
//                "id": "1032902227865237930",
//                "from": {
//                    "id": 240491290,
//                    "is_bot": false,
//                    "first_name": "Leson",
//                    "last_name": "Farovsky",
//                    "username": "Farovsky",
//                    "language_code": "ru"
//                },
//                "message": {
//                    "message_id": 100,
//                    "from": {
//                        "id": 1796512089,
//                        "is_bot": true,
//                        "first_name": "LeoVentoni_retail",
//                        "username": "LeoVentoni_retail_bot"
//                    },
//                    "chat": {
//                        "id": 240491290,
//                        "first_name": "Leson",
//                        "last_name": "Farovsky",
//                        "username": "Farovsky",
//                        "type": "private"
//                    },
//                    "date": 1635430737,
//                    "text": "Напоминаем Вам, что автомобиль C 608 OA 50 записан на ремонт 29.10.2021 в ООО \"Глобал Трак Сервис Чулково\". Просим Вас подтвердить запись",
//                    "reply_markup": {
//                        "inline_keyboard": [
//                            [
//                                {
//                                    "text": "Подтвердить",
//                                    "callback_data": "1:ЗаявкаНаРемонт:d55c0e17-c2b3-11eb-80fb-0cc47ab61a06"
//                                }
//                            ],
//                            [
//                                {
//                                    "text": "Отклонить",
//                                    "callback_data": "2:ЗаявкаНаРемонт:d55c0e17-c2b3-11eb-80fb-0cc47ab61a06"
//                                }
//                            ]
//                        ]
//                    }
//                },
//                "chat_instance": "6744135463728886599",
//                "data": "2:ЗаявкаНаРемонт:d55c0e17-c2b3-11eb-80fb-0cc47ab61a06"
//            }
//        }
//    ]
//}
Процедура ОбработатьНажатиеКнопки(НастройкиБота, Сообщение, chat_id, message_id, Пользователь)

	ВыбранноеЗначение = Сообщение.callback_query.data;
	Если ВыбранноеЗначение = "СтатусМитинг" Тогда
		БизнесПроцессОбъект = НовыйБизнесПроцессСтатусМитинг(Пользователь, НастройкиБота.ссылка);
	ИначеЕсли ВыбранноеЗначение = "Ретроспектива" Тогда
		Возврат;
	Иначе
		Возврат;		
	КонецЕсли;	
	
	//удалим кнопки после нажатия
	СоединениеHTTP = Новый HTTPСоединение("api.telegram.org",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	АдресЗапроса = СтрШаблон("bot%1/editMessageReplyMarkup?chat_id=%2&message_id=%3",НастройкиБота.Токен, chat_id,message_id);
	ЗапросHTTP   = Новый HTTPЗапрос(АдресЗапроса);
	СоединениеHTTP.Получить(ЗапросHTTP);
	
	БизнесПроцессОбъект.Старт();

КонецПроцедуры

Функция НовыйБизнесПроцессСтатусМитинг(Пользователь, Бот)

	БизнеспроцессОбъект = БизнесПроцессы.СтатусМитинг.СоздатьБизнесПроцесс();
	БизнеспроцессОбъект.Пользователь = Пользователь; 
	БизнеспроцессОбъект.Дата = ТекущаяДатаСеанса();
	БизнеспроцессОбъект.Бот = Бот;
	БизнеспроцессОбъект.Записать();
	
	Возврат БизнеспроцессОбъект;

КонецФункции // НовыйБизнесПроцессСтатусМитинг()

Процедура ВыполнитьТекущуюЗадачу(ТекущаяЗадача, Ответ)

	ОбъектТекущаяЗадача = ТекущаяЗадача.ПолучитьОбъект();
	ОбъектТекущаяЗадача.Ответ = Ответ;
	//ОбъектТекущаяЗадача.Записать();
	ОбъектТекущаяЗадача.ВыполнитьЗадачу();

КонецПроцедуры

Функция ТекущаяЗадачаПользователя(Пользователь)
	
	ЗадачаСсылка = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗадачиПользователей.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачиПользователей КАК ЗадачиПользователей
	|ГДЕ
	|	ЗадачиПользователей.БизнесПроцесс.Пользователь = &Пользователь
	|	И НЕ ЗадачиПользователей.Выполнена");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗадачаСсылка = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат ЗадачаСсылка;
	
КонецФункции // ТекущаяЗадачаПользователя()

Процедура ОтправитьСписокТемДляВзаимодействий(Токен, Chat_id)

	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("parse_mode", "Markdown");
	
	МассивКнопок = Новый Массив;
	
	МетаданныеВидовВзаимодействий = Метаданные.Перечисления.ВидыВзаимодействий.ЗначенияПеречисления;
	
	СтруктураКлавиатуры = Новый Структура;
	МассивКнопок = Новый Массив;
	
	Для Каждого ЭлементМетаданных Из МетаданныеВидовВзаимодействий Цикл
		
		МассивКнопки    = Новый Массив;
		СтруктураКнопкиПодтвердить = Новый Структура;
		СтруктураКнопкиПодтвердить.Вставить("text"		   , ЭлементМетаданных.Синоним);
		СтруктураКнопкиПодтвердить.Вставить("callback_data", ЭлементМетаданных.Имя);
		МассивКнопки.добавить(СтруктураКнопкиПодтвердить);
		
		МассивКнопок.Добавить(МассивКнопки);
		
	КонецЦикла;	
	
	СтруктураКлавиатуры.Вставить("inline_keyboard", МассивКнопок);
	
	СтрJSON = КоннекторHTTP.ОбъектВJson(СтруктураКлавиатуры);
	
	ДопПараметры = "&parse_mode=HTML&reply_markup=" + СтрJSON;
	
	TelegramSendMessage(Токен, "Выберите тему для опроса.", Chat_id, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти
