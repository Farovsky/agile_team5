#Если Не ВебКлиент И Не ТонкийКлиент И Не МобильныйКлиент Тогда

Процедура УстановитьОбъектМетаданных(НовоеПолноеИмяТаблицы = Неопределено) Экспорт

	Если НовоеПолноеИмяТаблицы <> Неопределено Тогда
		ЗначениеИзменено = Ложь;
		ирОбщий.ПрисвоитьЕслиНеРавноЛкс(фОбъект.ПолноеИмяТаблицы, НовоеПолноеИмяТаблицы, ЗначениеИзменено);
		Если Не ЗначениеИзменено Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	Если Элементы.Найти("ДинамическийСписокВременноеПоле") <> Неопределено Тогда
		Элементы.ДинамическийСписокВременноеПоле.Видимость = Ложь;
		Элементы.Переместить(Элементы.ДинамическийСписокВременноеПоле, ЭтаФорма);
	КонецЕсли; 
	Элементы.ДинамическийСписок.Видимость = Истина;
	Элементы.ДинамическийСписок.ИзменятьСоставСтрок = Истина;
	МассивФрагментов = ирОбщий.СтрРазделитьЛкс(фОбъект.ПолноеИмяТаблицы);
	ОсновнойЭУ = Элементы.ДинамическийСписок;
	ОсновнойЭУ.РежимВыбора = РежимВыбора;
	ОбъектМД = ирОбщий.ОбъектМДПоПолномуИмениТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы, Истина);
	ЭтаФорма.ЕстьОграниченияДоступа = ирОбщий.ЕстьОграниченияДоступаКСтрокамТаблицыНаЧтениеЛкс(ОбъектМД);
	Элементы.ПраваДоступаКСтрокам.Гиперссылка = ЕстьОграниченияДоступа;
	ТипТаблицыБД = ирОбщий.ТипТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы);
	Элементы.ФормаНайтиВыбратьПоID.Доступность = ирОбщий.ЛиКорневойТипСсылочногоОбъектаБДЛкс(ТипТаблицыБД);
	Элементы.ФормаРедакторОбъектаБД.Доступность = ТипТаблицыБД <> "Изменения";
	СоединяемыеРегистры.Очистить();
	СоединенныеРегистры = Новый Массив;
	Если ирОбщий.ЛиКорневойТипСсылкиЛкс(ТипТаблицыБД) Тогда
		СохраненныеНастройки = ирОбщий.ВосстановитьЗначениеЛкс("ДинамическийСписок." + фОбъект.ПолноеИмяТаблицы + "." + РежимВыбора);
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") И СохраненныеНастройки.Свойство("СоединенныеРегистры") Тогда
			СоединенныеРегистры = СохраненныеНастройки.СоединенныеРегистры;
		КонецЕсли; 
		ТипСсылки = Тип(ирОбщий.ИмяТипаИзПолногоИмениМДЛкс(фОбъект.ПолноеИмяТаблицы));
		Для Каждого МетаРегистр Из Метаданные.РегистрыСведений Цикл
			#Если Сервер И Не Сервер Тогда
				МетаРегистр = Метаданные.РегистрыСведений.АвансыРаботникам;
			#КонецЕсли
			Если Истина
				И МетаРегистр.Измерения.Количество() = 1
				И МетаРегистр.Измерения[0].Тип.СодержитТип(ТипСсылки)
			Тогда
				СтрокаРегистра = СоединяемыеРегистры.Добавить();
				СтрокаРегистра.Имя = МетаРегистр.Имя;
				СтрокаРегистра.ПолноеИмя = МетаРегистр.ПолноеИмя();
				СтрокаРегистра.Представление = МетаРегистр.Синоним;
				Если МетаРегистр.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					СтрокаРегистра.ПолноеИмя = СтрокаРегистра.ПолноеИмя + ".СрезПоследних";
					СтрокаРегистра.Представление = СтрокаРегистра.Представление + " (срез)";
				КонецЕсли; 
				СтрокаРегистра.Соединить = СоединенныеРегистры.Найти(СтрокаРегистра.ПолноеИмя) <> Неопределено;
			КонецЕсли; 
		КонецЦикла;
		Для Каждого МетаРегистр Из Метаданные.РегистрыНакопления Цикл
			#Если Сервер И Не Сервер Тогда
				МетаРегистр = Метаданные.РегистрыНакопления.ОстаткиДнейДополнительныхОтпусков;
			#КонецЕсли
			Если Истина
				И МетаРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки
				И МетаРегистр.Измерения.Количество() = 1
				И МетаРегистр.Измерения[0].Тип.СодержитТип(ТипСсылки)
			Тогда
				СтрокаРегистра = СоединяемыеРегистры.Добавить();
				СтрокаРегистра.Имя = МетаРегистр.Имя;
				СтрокаРегистра.ПолноеИмя = МетаРегистр.ПолноеИмя() + ".Остатки";
				СтрокаРегистра.Представление = МетаРегистр.Синоним + " (остатки)";
				СтрокаРегистра.Соединить = СоединенныеРегистры.Найти(СтрокаРегистра.ПолноеИмя) <> Неопределено;
			КонецЕсли; 
		КонецЦикла;
		Если фОбъект.РежимИмяСиноним Тогда
			СоединяемыеРегистры.Сортировать("Имя");
		Иначе
			СоединяемыеРегистры.Сортировать("Представление");
		КонецЕсли; 
	КонецЕсли; 
	Элементы.СоединяемыеРегистры.Видимость = СоединяемыеРегистры.Количество() > 0;
	Если Не ОбновитьЗапросБД() Тогда
		Возврат
	КонецЕсли;
	фОбъект.СтарыйОбъектМетаданных = фОбъект.ПолноеИмяТаблицы;
	ЭтаФорма.мКлючУникальности = фОбъект.ПолноеИмяТаблицы;
	ЭтаФорма.КлючНазначенияИспользования = фОбъект.ПолноеИмяТаблицы; // Надо делать на сервере, иначе применяться настройки не будут
	ПредставлениеТаблицы = ирОбщий.ПредставлениеТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы);
	ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, "Динамический список ", "ДС");
	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок,, ПредставлениеТаблицы, ": ");
	Если РежимВыбора Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (выбор)";
	КонецЕсли; 
	фОбъект.ВместоОсновной = ирОбщий.ИспользованиеДинамическогоСпискаВместоОсновнойФормыЛкс(фОбъект.ПолноеИмяТаблицы);
	ирОбщий.ПоследниеВыбранныеЗаполнитьПодменюЛкс(ЭтаФорма, Элементы.ПоследниеВыбранные, Элементы.ДинамическийСписок);
	ОбновитьПодменюПоследнихОтборов();
	Если Истина
		И ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы)
		И ПараметрТекущаяСтрока <> Неопределено 
		И ЗначениеЗаполнено(ПараметрТекущаяСтрока) 
	Тогда
		Если Ложь
			Или ирОбщий.ЛиСсылкаНаОбъектБДЛкс(ПараметрТекущаяСтрока, Ложь)
			Или ирОбщий.ЛиСсылкаНаПеречислениеЛкс(ПараметрТекущаяСтрока)
			Или ирОбщий.ЛиКлючЗаписиРегистраЛкс(ПараметрТекущаяСтрока)
		Тогда
			Элементы.ДинамическийСписок.ТекущаяСтрока = ПараметрТекущаяСтрока;
		//ИначеЕсли ирОбщий.ЛиСсылкаНаОбъектБДЛкс(НачальноеЗначениеВыбора, Ложь) Тогда 
		//	ДанныеСписка = ирОбщий.ПолучитьДанныеЭлементаУправляемойФормыЛкс(ЭлементыФормы.ДинамическийСписок); //
		//	ТекущаяСтрока = ДанныеСписка.Найти(НачальноеЗначениеВыбора, "Ссылка");
		//	Если ТекущаяСтрока <> Неопределено Тогда
		//		ЭлементыФормы.ДинамическийСписок.ТекущаяСтрока = ТекущаяСтрока;
		//	КонецЕсли; 
		КонецЕсли;     
		ЭтаФорма.ПараметрТекущаяСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьЗапросБД()
	
	ОсновнойЭУ = Элементы.ДинамическийСписок;
	ТипТаблицыБД = ирОбщий.ТипТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы);
	ПолноеИмяТаблицыСДопами = ирКэш.ИмяТаблицыИзМетаданныхЛкс(фОбъект.ПолноеИмяТаблицы); // Добавляем ".ДвиженияССубконто", если надо
	Если Ложь
		Или ТипТаблицыБД = "Последовательность"
		Или ТипТаблицыБД = "Изменения"
		Или ТипТаблицыБД = "Перерасчет"
		Или ирОбщий.ЛиТипВложеннойТаблицыБДЛкс(ТипТаблицыБД)
	Тогда
		////Сообщить("Динамический список для таблицы """ + фОбъект.ПолноеИмяТаблицы + """ недоступен");
		//ДинамическийСписок.ПроизвольныйЗапрос = Истина;
		//ДинамическийСписок.ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + фОбъект.ПолноеИмяТаблицы;
		ДинамическийСписок.ОсновнаяТаблица = "";
	Иначе
		ДинамическийСписок.ОсновнаяТаблица = ПолноеИмяТаблицыСДопами;
	КонецЕсли; 
	СоединенныеРегистры = ирОбщий.ВыгрузитьСвойствоКоллекцииЛкс(СоединяемыеРегистры.НайтиСтроки(Новый Структура("Соединить", Истина)), "ПолноеИмя");
	Если Не ирСервер.НастроитьАвтоТаблицуФормыДинамическогоСпискаЛкс(ЭтаФорма, ОсновнойЭУ, ПолноеИмяТаблицыСДопами, фОбъект.РежимИмяСиноним,, СоединенныеРегистры) Тогда 
		фОбъект.ПолноеИмяТаблицы = "";
		Возврат Ложь;
	КонецЕсли;
	ОбновитьСлужебныеДанные();
	//Попытка
	//	Элементы.ДинамическийСписок.Колонки.Наименование.ОтображатьИерархию = Истина;
	//	Элементы.ДинамическийСписок.Колонки.Картинка.ОтображатьИерархию = Ложь;
	//	Элементы.ДинамическийСписок.Колонки.Картинка.Видимость = Ложь;
	//Исключение
	//КонецПопытки;
	//Элементы.КоманднаяПанельПереключателяДерева.Кнопки.РежимДерева.Доступность = ирОбщий.ЛиМетаданныеИерархическогоОбъектаЛкс(ОбъектМД);
	//ирОбщий.НастроитьТабличноеПолеЛкс(ОсновнойЭУ);
	ЗагрузитьНастройкиТаблицы();
	ирОбщий.КомпоновщикНастроекВосстановитьЛкс(ДинамическийСписок.КомпоновщикНастроек); // Все битые ссылки на поля удалим. Но в отборе почему то платформа этого не делает https://www.hostedredmine.com/issues/947614
	//РезультирующаяСхема = Элементы.ДинамическийСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	//АдресСхемы = ПоместитьВоВременноеХранилище(РезультирующаяСхема, ЭтаФорма.УникальныйИдентификатор);
	ИсполняемыеНастройки = ОсновнойЭУ.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	ПорядокТаблицы = ИсполняемыеНастройки.Порядок.Элементы;
	ЭлементПорядкаТипаДата = Неопределено;
	Если ПорядокТаблицы.Количество() > 0 Тогда 
		ПолеОсновнойТаблицы = ирКэш.ПоляТаблицыБДЛкс(ПолноеИмяТаблицыСДопами).Найти("" + ПорядокТаблицы[0].Поле, "Имя");
		Если Истина
			И ПолеОсновнойТаблицы <> Неопределено 
			И ПолеОсновнойТаблицы.ТипЗначения.СодержитТип(Тип("Дата"))
		Тогда
			ЭлементПорядкаТипаДата = ПорядокТаблицы[0];
		КонецЕсли;
	КонецЕсли;
	Если ЭлементПорядкаТипаДата <> Неопределено И ЭлементПорядкаТипаДата.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда 
		ОсновнойЭУ.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
	Иначе
		ОсновнойЭУ.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Начало;
	КонецЕсли;
	Возврат Истина;

КонецФункции

Процедура ОбновитьПодменюПоследнихОтборов()
	
	#Если Сервер И Не Сервер Тогда
		ПоследниеОтборыНажатие();
	#КонецЕсли
	ирОбщий.ПоследниеВыбранныеЗаполнитьПодменюЛкс(ЭтаФорма, Элементы.ПоследниеОтборы, фОбъект.ПолноеИмяТаблицы, , "Отборы");

КонецПроцедуры

Процедура СохранитьНастройкиТаблицы()
	
	Если Не ЗначениеЗаполнено(фОбъект.СтарыйОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли; 
	фОбъект.НастройкиКолонок.Очистить();
	ЗаполнитьНастройкиКолонокГруппы(Элементы.ДинамическийСписок);
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НастройкиКолонок", фОбъект.НастройкиКолонок.Выгрузить());
	СтруктураНастроек.Вставить("СоединенныеРегистры", СоединяемыеРегистры.Выгрузить(Новый Структура("Соединить", Истина)).ВыгрузитьКолонку("ПолноеИмя"));
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", ЭтаФорма.ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки);
	СтруктураНастроек.Вставить("ИерархическийПросмотр", Элементы.ДинамическийСписок.Отображение <> ОтображениеТаблицы.Список);
	СтруктураНастроек.Вставить("ТекущаяСтрока", Элементы.ДинамическийСписок.ТекущаяСтрока);
	ирОбщий.СохранитьЗначениеЛкс("ДинамическийСписок." + фОбъект.СтарыйОбъектМетаданных + "." + РежимВыбора, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиКолонокГруппы(Знач ГруппаКолонок)
	
	Для Каждого КолонкаТП Из ирОбщий.ВсеПодчиненныеЭлементыФормыЛкс(ГруппаКолонок) Цикл
		ОписаниеКолонки = фОбъект.НастройкиКолонок.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеКолонки, КолонкаТП,, "Имя"); 
		ОписаниеКолонки.Имя = ИмяКолонкиБезРодителя(ЭтаФорма, КолонкаТП);
		ОписаниеКолонки.ВысотаЯчейки = КолонкаТП.Высота;
	КонецЦикла;

КонецПроцедуры

// Реальная директива здесь - &НаКлиентеНаСервереБезКонтекста, остальные директивы нужны для контекстной подсказки по параметру ЭтаФорма
#Если Сервер И Не Сервер Тогда
	&НаСервере
#Иначе
	&НаКлиентеНаСервереБезКонтекста
#КонецЕсли
Функция ИмяКолонкиБезРодителя(ЭтаФорма, Колонка)
	
	Возврат Сред(Колонка.Имя, СтрДлина(ЭтаФорма.Элементы.ДинамическийСписок.Имя) + 1);
	
КонецФункции

Процедура ЗагрузитьНастройкиТаблицы()
	
	ЭтаФорма.ДинамическийСписок.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Новый ПользовательскиеНастройкиКомпоновкиДанных);
	СтруктураНастроек = ирОбщий.ВосстановитьЗначениеЛкс("ДинамическийСписок." + фОбъект.ПолноеИмяТаблицы + "." + РежимВыбора);
	Если СтруктураНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		#Если Сервер И Не Сервер Тогда
			СтруктураНастроек = Новый Структура;
		#КонецЕсли
		фОбъект.НастройкиКолонок.Загрузить(СтруктураНастроек.НастройкиКолонок);
		Если СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
			// Антибаг платформы 8.3. Отключим некорректные элементы отбора https://www.hostedredmine.com/issues/947618
			Для Каждого ЭлементНастроек Из СтруктураНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
					Для Каждого ЭлементОтбора Из ЭлементНастроек.Элементы Цикл
						Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
							Если ЭтаФорма.ДинамическийСписок.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение) = Неопределено Тогда
								ЭлементОтбора.Использование = Ложь; 
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ТипЗнч(ЭлементНастроек) = Тип("Порядок") Тогда
					Для Каждого ЭлементПорядка Из ЭлементНастроек.Элементы Цикл
						Если ТипЗнч(ЭлементПорядка) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
							Если ЭтаФорма.ДинамическийСписок.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.НайтиПоле(ЭлементПорядка.Поле) = Неопределено Тогда
								ЭлементПорядка.Использование = Ложь; 
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ЭтаФорма.ДинамическийСписок.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.ПользовательскиеНастройки);
		КонецЕсли; 
		Если СтруктураНастроек.Свойство("ТекущаяСтрока") Тогда
			ТипТаблицы = ирОбщий.ТипТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы);
			Если Истина
				И ирОбщий.ЛиКорневойТипСсылкиЛкс(ТипТаблицы)
				И Не ирОбщий.ЛиКорневойТипДокументаЛкс(ТипТаблицы)
				И Не ирОбщий.ЛиКорневойТипБизнесПроцессаЛкс(ТипТаблицы)
				И Не ТипТаблицы = "Задача"
				И (Ложь
					Или Не ирОбщий.ЛиМетаданныеИерархическогоОбъектаЛкс(ирОбщий.ОбъектМДПоПолномуИмениТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы))
					Или Не СтруктураНастроек.ИерархическийПросмотр)
			Тогда     
				Элементы.ДинамическийСписок.ТекущаяСтрока = СтруктураНастроек.ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли; 
		Если СтруктураНастроек.Свойство("ИерархическийПросмотр") И СтруктураНастроек.ИерархическийПросмотр Тогда 
			Элементы.ДинамическийСписок.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		Иначе
			Элементы.ДинамическийСписок.Отображение = ОтображениеТаблицы.Список;
		КонецЕсли;
	КонецЕсли; 
	ПрименитьНастройкиКолонок();
	// Чтобы появилась команда ALT+F "Расширенный поиск"
	Элементы.ДинамическийСписок.Видимость = Ложь;
	Элементы.ДинамическийСписок.Видимость = Истина;
	
КонецПроцедуры


Процедура ПрименитьНастройкиКолонок()
	
	НачальноеКоличество = фОбъект.НастройкиКолонок.Количество(); 
	ПраваяКолонка = Неопределено;
	Для Счетчик = 1 По НачальноеКоличество Цикл
		ОписаниеКолонки = фОбъект.НастройкиКолонок[НачальноеКоличество - Счетчик]; 
		ИмяКолонки = Элементы.ДинамическийСписок.Имя + ОписаниеКолонки.Имя;
		КолонкаТП = Элементы.Найти(ИмяКолонки);
		Если КолонкаТП <> Неопределено Тогда
			Если Истина
				И ПраваяКолонка <> Неопределено
				И ПраваяКолонка.Родитель = Элементы.ДинамическийСписок
				И КолонкаТП.Родитель <> Элементы.ДинамическийСписок
			Тогда
				Родитель = Элементы.ДинамическийСписок;
			Иначе
				Родитель = КолонкаТП.Родитель;;
			КонецЕсли;
			Элементы.Переместить(КолонкаТП, Родитель, Родитель.ПодчиненныеЭлементы[0]);
			КолонкаТП.Видимость = ОписаниеКолонки.Видимость;
			Если ОписаниеКолонки.Ширина > 0 Тогда
				КолонкаТП.Ширина = ОписаниеКолонки.Ширина;
			КонецЕсли; 
			Если ОписаниеКолонки.ВысотаЯчейки > 0 Тогда
				КолонкаТП.Высота = ОписаниеКолонки.ВысотаЯчейки;
			КонецЕсли; 
			ПраваяКолонка = КолонкаТП;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НайтиСсылкуВСписке(КлючСтроки, УстановитьОбъектМетаданных = Истина) Экспорт

	#Если ТонкийКлиент Или ВебКлиент Тогда
		Возврат;
	#Иначе
		МетаданныеТаблицы = Метаданные.НайтиПоТипу(ирОбщий.ТипОбъектаБДЛкс(КлючСтроки));
		Если УстановитьОбъектМетаданных Тогда
			УстановитьОбъектМетаданныхНаКлиенте(МетаданныеТаблицы.ПолноеИмя());
		КонецЕсли; 
		ИмяXMLТипа = СериализаторXDTO.XMLТипЗнч(КлючСтроки).ИмяТипа;
		Если Ложь
			Или Найти(ИмяXMLТипа, "Ref.") > 0
			Или Найти(ИмяXMLТипа, "RecordKey.") > 0
		Тогда
			Элементы.ДинамическийСписок.ТекущаяСтрока = КлючСтроки;
		Иначе
			ирОбщий.СкопироватьОтборЛюбойЛкс(ПользовательскийОтбор(), КлючСтроки.Методы.Отбор);
		КонецЕсли; 
	#КонецЕсли 

КонецПроцедуры

&НаКлиенте
Процедура ОбъектОбъектМетаданныхПриИзменении(Элемент)
	СохранитьНастройкиТаблицы();
	УстановитьОбъектМетаданныхНаКлиенте();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораОбъектаМетаданных()
	Возврат ирОбщий.ПараметрыВыбораОбъектаМетаданныхЛкс(Истина, Истина, Истина, Истина,, Истина, Истина, Истина,,, Истина,,, Истина);
КонецФункции

&НаКлиенте
Процедура ОбъектОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ирОбщий.ОбъектМетаданныхНачалоВыбораЛкс(Элемент, ПараметрыВыбораОбъектаМетаданных(), СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ирОбщий.ОбъектМетаданныхОкончаниеВводаТекстаЛкс(Элемент, ПараметрыВыбораОбъектаМетаданных(), Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбъектМетаданныхНаКлиенте(ПолноеИмяТаблицы = Неопределено)
	
	УстановитьОбъектМетаданных(ПолноеИмяТаблицы);
	ЭтаФорма.КлючУникальности = фОбъект.ПолноеИмяТаблицы;
	ПослеУстановкиОбъектаМетаданныхНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиОбъектаМетаданныхНаКлиенте()
	
	фОбъект.КоличествоСтрокВОбластиПоиска = "...";
	Если ирОбщий.ЛиАсинхронностьДоступнаЛкс() Тогда
		ирОбщий.ОтменитьФоновоеЗаданиеЛкс(фОбъект.ИДФоновогоЗадания);
		фОбъект.АдресХранилищаКоличестваСтрок = ПоместитьВоВременноеХранилище(Null, ЭтаФорма.УникальныйИдентификатор);
		ПараметрыЗапуска = Новый Массив;
		ПараметрыЗапуска.Добавить(фОбъект.ПолноеИмяТаблицы);
		ПараметрыЗапуска.Добавить(фОбъект.АдресХранилищаКоличестваСтрок);
		#Если Сервер И Не Сервер Тогда
			ирОбщий.КоличествоСтрокВТаблицеМДЛкс();
		#КонецЕсли
		ирОбщий.ДобавитьТекущемуПользователюРолиИРЛкс();
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ирОбщий.КоличествоСтрокВТаблицеМДЛкс", ПараметрыЗапуска,, "ИР. Вычисление количества строк в таблице " + фОбъект.ПолноеИмяТаблицы);
		фОбъект.ИДФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	КонецЕсли; 
	Если ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) И Не РежимВыбора Тогда
		ирОбщий.ДобавитьТаблицуВИзбранноеЛкс(фОбъект.ПолноеИмяТаблицы);
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
		ОбновитьКоличествоСтрок();
	#КонецЕсли
	ПодключитьОбработчикОжидания("ОбновитьКоличествоСтрок", 0.1, Истина);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы = Элементы;
	ЭтаФорма.ПараметрТекущаяСтрока = Параметры.ТекущаяСтрока;
	ЭтаФорма.РежимВыбора = Параметры.РежимВыбора;
	ЭтаФорма.ПараметрТекущаяКолонка = Параметры.ТекущаяКолонка;
	Элементы.ПолноеИмяТаблицы.ТолькоПросмотр = РежимВыбора;
	ирСервер.УправляемаяФорма_ПриСозданииЛкс(ЭтаФорма, Отказ, СтандартнаяОбработка,, ПоляСИсториейВыбора());
	НовоеИмяТаблицы = Параметры.ИмяТаблицы;
	Если ЗначениеЗаполнено(НовоеИмяТаблицы) Тогда
		НовоеИмяТаблицы = ирОбщий.ПервыйФрагментЛкс(НовоеИмяТаблицы, ";");
		ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(НовоеИмяТаблицы);
		Если ОбъектМД <> Неопределено Тогда
			НовоеИмяТаблицы = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	УстановитьОбъектМетаданных(НовоеИмяТаблицы);
	Если РежимВыбора Тогда
		ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПоляСИсториейВыбора()
	
	Возврат Элементы.ПолноеИмяТаблицы;

КонецФункции

&НаСервереБезКонтекста
Процедура ДинамическийСписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	#Если Сервер И Не Сервер Тогда
	    Настройки = Новый НастройкиКомпоновкиДанных;
	#КонецЕсли
	ИмяПоляСсылка = ирОбщий.ПеревестиСтроку("Ссылка");
	РасширенноеПредставлениеХранилищЗначений = Ложь;
	РасширенныеКолонки = Неопределено;
	ИменаКолонокСПиктограммамиТипов = Неопределено;
	КолонкиТаблицы = Настройки.Выбор.Элементы;
	ВариантОтображенияИдентификаторов = Неопределено;
	Настройки.ДополнительныеСвойства.Свойство("ОтображениеИдентификаторов", ВариантОтображенияИдентификаторов);
	СостоянияКнопки = ирОбщий.СостоянияКнопкиОтображатьПустыеИИдентификаторыЛкс();
	ЛиОтбражатьПустые = Ложь
		Или ВариантОтображенияИдентификаторов = СостоянияКнопки[1]
		Или ВариантОтображенияИдентификаторов = СостоянияКнопки[2];
	ОтображатьИдентификаторы = Ложь
			Или ВариантОтображенияИдентификаторов = СостоянияКнопки[2];
	ирПлатформа = ирКэш.Получить();
	#Если Сервер И Не Сервер Тогда
	    ирПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Если ТипЗнч(ИменаКолонокСПиктограммамиТипов) = Тип("Строка") Тогда
		ИменаКолонокСПиктограммамиТипов = ирОбщий.СтрРазделитьЛкс(ИменаКолонокСПиктограммамиТипов, ",", Истина); 
	КонецЕсли; 
	ЦветФонаПустогоЗначения = ирОбщий.ЦветФонаПустогоЗначенияЛкс();
	ЦветТекстаПустогоЗначения = ирОбщий.ЦветТекстаПустогоЗначенияЛкс();
	КолонкиВРежимеПароля = Новый Массив;
	ПолноеИмяТаблицыБД = Настройки.ДополнительныеСвойства.ИмяТаблицы;
	ПоляТаблицыБД = ирКэш.ПоляТаблицыБДЛкс(ПолноеИмяТаблицыБД);
	Для Каждого ПолеТаблицы Из ПоляТаблицыБД.НайтиСтроки(Новый Структура("РежимПароля", Истина)) Цикл
		КолонкиВРежимеПароля.Добавить(ПолеТаблицы.Имя);
	КонецЦикла;
	Для Каждого СтрокаСписка Из Строки Цикл
		СтрокаОформления = СтрокаСписка.Значение;
		ДанныеСтроки = СтрокаОформления.Данные;
		Ячейки = СтрокаОформления.Оформление;
		Для Каждого Ячейка Из Ячейки Цикл
			//КолонкаОтображаетДанныеФлажка = Ложь;
			ЗначениеЯчейки = ДанныеСтроки[Ячейка.Ключ];
			
			// Антибаг платформы 8.3.18 теряются значения NULL https://www.hostedredmine.com/issues/925439
			ИмяКолонкиПризнакаNULL = "_ЭтоNULL_";
			Если Истина
				И ДанныеСтроки.Свойство(Ячейка.Ключ + ИмяКолонкиПризнакаNULL) 
				И ДанныеСтроки[Ячейка.Ключ + ИмяКолонкиПризнакаNULL] = Истина
			Тогда
				ЗначениеЯчейки = NULL;
				Ячейка.Значение.УстановитьЗначениеПараметра("Текст", "");
			КонецЕсли;
			
			ПредставлениеЗначения = "";
			//Если Ложь
			//	Или КолонкаОтображаетДанныеФлажка
			//	Или Формат(ЗначениеЯчейки, Колонка.Формат) = Ячейка.Текст 
			//Тогда // Здесь могут быть обращения к БД
				//Если Истина
				//	И Не КолонкаОтображаетДанныеФлажка
				//	И ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") 
				//Тогда
				//	ПредставлениеЗначения = ирОбщий.РасширенноеПредставлениеЗначенияЛкс(ЗначениеЯчейки, Колонка,, РасширенноеПредставлениеХранилищЗначений);
				//КонецЕсли; 
				Если ЛиОтбражатьПустые И Не ирОбщий.ЛиКоллекцияЛкс(ЗначениеЯчейки) Тогда
					Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
						Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
							ПредставлениеЗначения = ирПлатформа.ПредставлениеПустогоЗначенияЛкс(ЗначениеЯчейки);
							Ячейка.Значение.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПустогоЗначения);
						ИначеЕсли ОтображатьИдентификаторы Тогда
							ПредставлениеЗначения = """" + ЗначениеЯчейки + """";
						КонецЕсли; 
					Иначе
						Попытка
							ЗначениеНепустое = ЗначениеЗаполнено(ЗначениеЯчейки) И ЗначениеЯчейки <> Ложь;
						Исключение
							ЗначениеНепустое = Истина;
						КонецПопытки;
						Если Не ЗначениеНепустое Тогда
							ПредставлениеЗначения = ирПлатформа.ПредставлениеПустогоЗначенияЛкс(ЗначениеЯчейки);
							Ячейка.Значение.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПустогоЗначения);
						КонецЕсли;
					КонецЕсли; 
				Иначе
					Если ЗначениеЯчейки = 0 Тогда 
						Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
							ПредставлениеЗначения = "0";
						Иначе
							ПредставлениеЗначения = "" + ЗначениеЯчейки; // Ложь
						КонецЕсли;
						Ячейка.Значение.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаПустогоЗначения);
					КонецЕсли;
				КонецЕсли; 
			//КонецЕсли;

			Если ОтображатьИдентификаторы Тогда
				ИдентификаторСсылки = ирОбщий.СтроковыйИдентификаторСсылкиЛкс(ЗначениеЯчейки);
				Если ИдентификаторСсылки <> Неопределено Тогда
					XMLТип = XMLТипЗнч(ЗначениеЯчейки);
					ИдентификаторСсылки = ИдентификаторСсылки + "." + XMLТип.ИмяТипа;
				КонецЕсли; 
				Если ИдентификаторСсылки <> Неопределено Тогда
					ПредставлениеЗначения = ИдентификаторСсылки;
				КонецЕсли; 
			КонецЕсли; 
			Если Истина
				И Не ЛиОтбражатьПустые
				И КолонкиВРежимеПароля.Найти(Ячейка.Ключ) <> Неопределено 
			Тогда
				ПредставлениеЗначения = "*****";
			КонецЕсли; 
			Если ПредставлениеЗначения <> "" Тогда
				Ячейка.Значение.УстановитьЗначениеПараметра("Текст", ПредставлениеЗначения);
			КонецЕсли; 
		КонецЦикла;  
		Если Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ИдентификаторСсылкиЛкс")) <> Неопределено Тогда
			Попытка
				ЯчейкаИдентификатора = Ячейки["ИдентификаторСсылкиЛкс"];
			Исключение
				// Скрыли колонку в таблице
			КонецПопытки;
			Если ЯчейкаИдентификатора <> Неопределено Тогда
				Ссылка = ДанныеСтроки[ИмяПоляСсылка];
				Если ирОбщий.ЛиСсылкаНаПеречислениеЛкс(Ссылка) Тогда
					ИдентификаторСсылки = "" + XMLСтрока(Ссылка);
				Иначе
					ИдентификаторСсылки = "" + ирОбщий.СтроковыйИдентификаторСсылкиЛкс(Ссылка);
				КонецЕсли; 
				ЯчейкаИдентификатора.УстановитьЗначениеПараметра("Текст", ИдентификаторСсылки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗапомнитьОтбор()
	АктивнаяНастройка = ирОбщий.НастройкиДинамическогоСпискаЛкс(ДинамическийСписок, "Пользовательские");
	ДобавленВСписок = ирОбщий.ДобавитьОтборКомпоновкиВИсториюТаблицыБДЛкс(ЭтаФорма, фОбъект.ПолноеИмяТаблицы, АктивнаяНастройка, СтарыйКомпоновщик.Настройки);
	Если ДобавленВСписок Тогда 
		ОбновитьПодменюПоследнихОтборов();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОбъектМетаданныхОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокуЧерезРедакторОбъектаБД(Команда = Неопределено)
	
	ирОбщий.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(Элементы.ДинамическийСписок, фОбъект.ПолноеИмяТаблицы,,,,, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторОбъектаБДЯчейки(Команда)
	
	ЭлементыФормы = Элементы;
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.ДинамическийСписок);
	
КонецПроцедуры

&НаСервере
Процедура ОбъектРежимИмяСинонимПриИзмененииНаСервере()
	ирОбщий.НастроитьЗаголовкиАвтоТаблицыФормыДинамическогоСпискаЛкс(Элементы.ДинамическийСписок, фОбъект.ПолноеИмяТаблицы, фОбъект.РежимИмяСиноним);
	Элементы.СоединяемыеРегистрыИмя.Видимость = фОбъект.РежимИмяСиноним;
	Элементы.СоединяемыеРегистрыПредставление.Видимость = Не фОбъект.РежимИмяСиноним;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРежимИмяСинонимПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	ОбъектРежимИмяСинонимПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НовоеОкно(Команда)
	
	ирОбщий.ОткрытьНовоеОкноФормыЛкс(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция Отбор() Экспорт 
	Возврат ДинамическийСписок.Отбор;
КонецФункции

&НаКлиенте
Функция ПользовательскийОтбор() Экспорт 
	
	НастройкиСписка = ирОбщий.НастройкиДинамическогоСпискаЛкс(ДинамическийСписок, "Пользовательские");
	Возврат НастройкиСписка.Отбор;
	
КонецФункции

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ЭлементыФормы = Элементы;
	МножественныйВыбор = ЭлементыФормы.ДинамическийСписок.МножественныйВыбор;
	
	Если Не ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	Если РежимВыбора Тогда
		Закрыть();
	КонецЕсли; 
	//Попытка
		Отбор = ДинамическийСписок.Отбор;
	//Исключение
	//	Отбор = Неопределено;
	//КонецПопытки;
	Форма = ирОбщий.ОткрытьФормуСпискаЛкс(фОбъект.ПолноеИмяТаблицы, Отбор, Ложь, ВладелецФормы, РежимВыбора, МножественныйВыбор, ЭлементыФормы.ДинамическийСписок.ТекущаяСтрока);
	Если Форма = Неопределено Тогда
		ЭтаФорма.Открыть();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиСписка(Команда)
	СброситьНастройкиСпискаНаСервере();
КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиСпискаНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить(ирОбщий.ИмяПродуктаЛкс(), "ДинамическийСписок." + фОбъект.СтарыйОбъектМетаданных + "." + РежимВыбора, Неопределено);
	УстановитьОбъектМетаданных();
	СохранитьНастройкиТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура СколькоСтрок(Команда)
	Если Не ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыФормы = Элементы;
	НастройкиСписка = НастройкиРезультатаНаСервере();
	ирОбщий.ТабличноеПолеИлиТаблицаФормы_СколькоСтрокЛкс(ЭлементыФормы.ДинамическийСписок, НастройкиСписка);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьНужноеКоличество(Команда)
	
	Количество = 10;
	Если Не ВвестиЧисло(Количество, "Введите количество", 6, 0) Тогда
		Возврат;
	КонецЕсли; 
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли; 
	ВыделитьНужноеКоличествоНаСервере(Количество);

КонецПроцедуры

&НаСервере
Процедура ВыделитьНужноеКоличествоНаСервере(Знач Количество)
	
	ЭлементыФормы = Элементы;
	НастройкиСписка = НастройкиРезультатаНаСервере();
	ирОбщий.ВыделитьПервыеСтрокиДинамическогоСпискаЛкс(ЭлементыФормы.ДинамическийСписок, Количество, НастройкиСписка);

КонецПроцедуры

&НаКлиенте
Процедура РазличныеЗначенияКолонки(Команда)
	
	ЭлементыФормы = Элементы;
	АдресСхемы = Неопределено;
	НастройкиСписка = НастройкиРезультатаНаКлиенте(АдресСхемы);
	ирОбщий.ОткрытьРазличныеЗначенияКолонкиЛкс(ЭлементыФормы.ДинамическийСписок, НастройкиСписка, АдресСхемы);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСписка(Команда = Неопределено, АктивироватьФиксированныйОтбор = Ложь)
	
	Если Не ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	ИсполняемаяСхема = Неопределено;
	ИсполняемыеНастройки = НастройкиРезультатаНаКлиенте(ИсполняемаяСхема);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АктивироватьФиксированныйОтбор", АктивироватьФиксированныйОтбор);
	ПараметрыФормы.Вставить("ИсполняемыеНастройки", ИсполняемыеНастройки);
	ПараметрыФормы.Вставить("ИсполняемаяСхема", ИсполняемаяСхема);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормы.Вставить("Настройки", ДинамическийСписок.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", ДинамическийСписок.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
	ОткрытьФорму("Обработка.ирДинамическийСписок.Форма.НастройкиСпискаУпр", ПараметрыФормы, Элементы.ДинамическийСписок,,,, Новый ОписаниеОповещения("НастройкаСпискаЗавершение", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьЗапомнитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура ОПодсистеме(Команда)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбъекты(Команда)
	
	ЭлементыФормы = Элементы;
	НастройкиСписка = НастройкиРезультатаНаКлиенте();
	ирОбщий.ОткрытьПодборИОбработкуОбъектовИзДинамическогоСпискаЛкс(ЭлементыФормы.ДинамическийСписок, НастройкиСписка);

КонецПроцедуры

&НаКлиенте
Функция НастройкиРезультатаНаКлиенте(выхАдресСхемы = Неопределено)
	
	выхАдресСхемы = Неопределено;
    НастройкаКомпоновки = Неопределено;
    ИсполняемыеСхемаИНастройка(выхАдресСхемы, НастройкаКомпоновки);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(выхАдресСхемы));
	Компоновщик.ЗагрузитьНастройки(НастройкаКомпоновки);
	Результат = Компоновщик.Настройки;
	Возврат Результат;
	
КонецФункции

Функция НастройкиРезультатаНаСервере()
	
	АдресСхемы = Неопределено;
    НастройкаКомпоновки = Неопределено;
    ИсполняемыеСхемаИНастройка(АдресСхемы, НастройкаКомпоновки);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Компоновщик.ЗагрузитьНастройки(НастройкаКомпоновки);
	Результат = Компоновщик.Настройки;
	Возврат Результат;
	
КонецФункции

Процедура ИсполняемыеСхемаИНастройка(АдресСхемы, НастройкаКомпоновки)
	
	АдресСхемы = ПоместитьВоВременноеХранилище(Элементы.ДинамическийСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных(), УникальныйИдентификатор);
	НастройкаКомпоновки = Элементы.ДинамическийСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	// Для поддержки динамически добавленных (пользователем) полей списка
	ОбновитьСлужебныеДанные();

КонецПроцедуры

&НаКлиенте
Функция ИсполняемыеСхемаИНастройки() Экспорт 
	Возврат ИсполняемыеСхемаИНастройкиНаСервере();
КонецФункции

&НаСервере
Функция ИсполняемыеСхемаИНастройкиНаСервере() Экспорт 
	Результат = Новый Структура();
	Результат.Вставить("Схема", Элементы.ДинамическийСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных());
	Результат.Вставить("Настройки", Элементы.ДинамическийСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных());
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОтборБезЗначенияВТекущейКолонке(Команда)
	
	АктуализироватьПутьКДаннымТекущегоПоля(); 
	ирОбщий.ТабличноеПолеОтборДляЗначенияВТекущейКолонкеЛкс(Элементы.ДинамическийСписок);
	ПроверитьЗапомнитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗначенияВТекущейКолонке(Команда)
	
	АктуализироватьПутьКДаннымТекущегоПоля();
	ирОбщий.ТабличноеПолеОтборДляЗначенияВТекущейКолонкеЛкс(Элементы.ДинамическийСписок, Истина);
	ПроверитьЗапомнитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Для поддержки динамически добавленных (пользователем) полей списка
Процедура АктуализироватьПутьКДаннымТекущегоПоля()
	
	ДанныеКолонки = ирОбщий.ПутьКДаннымКолонкиТабличногоПоляЛкс(Элементы.ДинамическийСписок);
	Если Не ЗначениеЗаполнено(ДанныеКолонки) Тогда
		ОбновитьСлужебныеДанные();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСлужебныеДанные()
	
	ирСервер.УправляемаяФорма_ОбновитьСлужебныеДанныеЛкс(ЭтаФорма,, ПоляСИсториейВыбора());

КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтроки(Команда)
	
	ЭлементыФормы = Элементы;
	НастройкиСписка = НастройкиРезультатаНаКлиенте();
	ирОбщий.ВывестиСтрокиТабличногоПоляИПоказатьЛкс(ЭтаФорма, ЭлементыФормы.ДинамическийСписок,, НастройкиСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	
	ПользовательскиеНастройки = ирОбщий.НастройкиДинамическогоСпискаЛкс(ДинамическийСписок, "Пользовательские");
	ПользовательскийОтбор = ПользовательскиеНастройки.Отбор;
	ирОбщий.ОтключитьНастройкиКомпоновкиЛкс(ПользовательскийОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеИдентификаторов(Команда)
	
	ЭлементыФормы = Элементы;
	Кнопка = ЭлементыФормы.ФормаОтображениеИдентификаторов;
	ирОбщий.КнопкаОтображатьПустыеИИдентификаторыНажатиеЛкс(Кнопка);
	ДинамическийСписок.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтображениеИдентификаторов", Кнопка.Заголовок);
	Если ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) Тогда
		ЭлементыФормы.ДинамическийСписок.Обновить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПоследниеВыбранныеНажатие(Кнопка) Экспорт
	
	ЭлементыФормы = Элементы;
	ирОбщий.ПоследниеВыбранныеНажатиеЛкс(ЭтаФорма, ЭлементыФормы.ДинамическийСписок, , Кнопка);
	
КонецФункции

&НаКлиенте
Функция ПоследниеОтборыНажатие(Кнопка) Экспорт
	
	ЭлементыФормы = Элементы;
	АктивнаяНастройка = ирОбщий.НастройкиДинамическогоСпискаЛкс(ДинамическийСписок, "Пользовательские");
	#Если Сервер И Не Сервер Тогда
		АктивнаяНастройка = Новый НастройкиКомпоновкиДанных;
	#КонецЕсли
	ВыбраннаяНастройка = ирОбщий.ВыбранныйЭлементПоследнихЗначенийЛкс(ЭтаФорма, фОбъект.ПолноеИмяТаблицы, Кнопка, "Отборы", Истина);
	#Если Сервер И Не Сервер Тогда
		ВыбраннаяНастройка = Новый НастройкиКомпоновкиДанных;
	#КонецЕсли
	ирОбщий.СкопироватьОтборЛюбойЛкс(АктивнаяНастройка.Отбор, ВыбраннаяНастройка.Отбор);
	ирОбщий.ОбновитьТабличноеПолеДереваПослеУстановкиДанныхЛкс(ЭтаФорма, Элементы.КомпоновщикНастроекПользовательскиеНастройкиОтбор);
	
КонецФункции

&НаКлиенте
Процедура ДинамическийСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РежимВыбора Тогда
		ирОбщий.ПоследниеВыбранныеДобавитьЛкс(ЭтаФорма, ВыбраннаяСтрока);
	Иначе
		СтандартнаяОбработка = Не ОткрытьРедакторОбъектаБДЕслиНужно();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СтруктураФормы(Команда)
	
	// https://www.hostedredmine.com/issues/950113
	//ирОбщий.ОткрытьСтруктуруФормыЛкс(ЭтаФорма);
	ПараметрыВызова = Новый Структура("Форма", ЭтаФорма); 
	#Если Сервер И Не Сервер Тогда
		ОткрытьСтруктуруАктивнойФормыЛкс();
	#КонецЕсли
	ирОбщий.ПодключитьОбработчикОжиданияСПараметрамиЛкс("ОткрытьСтруктуруАктивнойФормыЛкс", ПараметрыВызова);

КонецПроцедуры 

&НаКлиенте
Процедура ДинамическийСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ЭлементыФормы = Элементы;
	ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(фОбъект.ПолноеИмяТаблицы);
	Если ирОбщий.ЛиДоступноРедактированиеВФормеОбъектаЛкс(ОбъектМД) Тогда
		Ответ = Вопрос("Использовать редактор объекта БД?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли; 
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		ДобавитьСтрокуЧерезРедакторОбъектаБД(, Копирование, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоСтрок()
	
	Если Истина
		И Не ирКэш.ЛиПортативныйРежимЛкс() 
		И Не ирКэш.ЛиФайловаяБазаЛкс()
	Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(фОбъект.ИДФоновогоЗадания);
		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ПодключитьОбработчикОжидания("ОбновитьКоличествоСтрок", 2, Истина);
		Иначе
			Результат = ирОбщий.ПрочитатьРезультатФоновогоЗаданияЛкс(фОбъект.АдресХранилищаКоличестваСтрок);
		КонецЕсли; 
	Иначе
		// www.hostedredmine.com/issues/884199
	КонецЕсли;
	Если Результат <> Неопределено Тогда
		фОбъект.КоличествоСтрокВОбластиПоиска = Результат;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ирОбщий.Форма_ПриОткрытииЛкс(ЭтаФорма);
	Если ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДинамическийСписок;
	КонецЕсли; 
	ПослеУстановкиОбъектаМетаданныхНаКлиенте();
	Если ПараметрТекущаяКолонка <> Неопределено Тогда
		КолонкаСписка = Элементы.ДинамическийСписок.ПодчиненныеЭлементы.Найти(Элементы.ДинамическийСписок.Имя + ПараметрТекущаяКолонка);
		Если КолонкаСписка <> Неопределено Тогда
			Элементы.ДинамическийСписок.ТекущийЭлемент = КолонкаСписка;
		КонецЕсли; 
		ЭтаФорма.ПараметрТекущаяКолонка = "";
	КонецЕсли; 
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элементы.ПолноеИмяТаблицы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонок(Команда)
	
	СохранитьНастройкиТаблицы();
	ФормаНастроек = ирОбщий.ПолучитьФормуЛкс("Обработка.ирДинамическийСписок.Форма.НастройкиКолонок",, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(ФормаНастроек, фОбъект); 
	ФормаНастроек.НастройкиКолонок.Загрузить(НастройкаКолонокСервер());
	//ФормаНастроек.СвязанноеТабличноеПоле = Элементы.ДинамическийСписок;
	Для Каждого СтрокаНастройкиКолонки Из ФормаНастроек.НастройкиКолонок Цикл
		ДоступноеПоле = ДинамическийСписок.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрокаНастройкиКолонки.Имя));
		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаНастройкиКолонки.ТипЗначения = ДоступноеПоле.Тип;
	КонецЦикла;
	Если Элементы.ДинамическийСписок.ТекущийЭлемент <> Неопределено Тогда
		ФормаНастроек.ПараметрИмяТекущейКолонки = ИмяКолонкиБезРодителя(ЭтаФорма, Элементы.ДинамическийСписок.ТекущийЭлемент);
	КонецЕсли; 
	ВыбранноеЗначение = ФормаНастроек.ОткрытьМодально();
	ОбработатьВыборНастроекКолонок(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборНастроекКолонок(Знач ВыбранноеЗначение)
	
	ОбработатьВыборНастроекКолонокСервер(ВыбранноеЗначение);

КонецПроцедуры

Процедура ОбработатьВыборНастроекКолонокСервер(Знач ВыбранноеЗначение)
	
	СтарыеНастройки = фОбъект.НастройкиКолонок.Выгрузить();
	Если ВыбранноеЗначение <> Неопределено Тогда
		Если ВыбранноеЗначение.Свойство("НастройкиКолонок") Тогда
			Если ВыбранноеЗначение.ПрименятьПорядок Тогда
				фОбъект.НастройкиКолонок.Загрузить(ВыбранноеЗначение.НастройкиКолонок);
			Иначе
				Для Каждого СтрокаКолонки Из фОбъект.НастройкиКолонок Цикл
					СтрокаНастройки = ВыбранноеЗначение.НастройкиКолонок.Найти(СтрокаКолонки.Имя, "Имя");
					ЗаполнитьЗначенияСвойств(СтрокаКолонки, СтрокаНастройки,, "Имя"); 
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли; 
		Если ВыбранноеЗначение.Свойство("ТекущаяКолонка") Тогда
			Элементы.ДинамическийСписок.ТекущийЭлемент = Элементы.Найти(Элементы.ДинамическийСписок.Имя + ВыбранноеЗначение.ТекущаяКолонка);
		КонецЕсли; 
	КонецЕсли; 
	ПрименитьНастройкиКолонок();
	Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение.Свойство("Сохранить") И ВыбранноеЗначение.Сохранить Тогда
		СохранитьНастройкиТаблицы();
	Иначе
		фОбъект.НастройкиКолонок.Загрузить(СтарыеНастройки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ОбработатьВыборНастроекКолонок(ВыбранноеЗначение);
	КонецЕсли; 
	
КонецПроцедуры

Функция НастройкаКолонокСервер()
	
	Возврат фОбъект.НастройкиКолонок.Выгрузить();

КонецФункции

&НаКлиенте
Процедура ПраваДоступаКСтрокамНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ирОбщий.ПолучитьФормуЛкс("Отчет.ирАнализПравДоступа.Форма",,, фОбъект.ПолноеИмяТаблицы);
	Форма.ПолноеИмяТаблицы = фОбъект.ПолноеИмяТаблицы;
	Форма.Пользователь = ИмяПользователя();
	Форма.ПараметрКлючВарианта = "ПоПользователям";
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуЧерезРедакторОбъектаБД(Команда = Неопределено, Копирование = Неопределено, ЭтоГруппа = Ложь)
	
	ИмяПоляСсылка = ирОбщий.ПеревестиСтроку("Ссылка");
	ИмяПоляЭтоГруппа = ирОбщий.ПеревестиСтроку("ЭтоГруппа");
	ЭлементыФормы = Элементы;
	Если Копирование = Неопределено Тогда
		Если ЭлементыФормы.ДинамическийСписок.ТекущаяСтрока <> Неопределено Тогда
			Ответ = Вопрос("Хотите скопировать текущую строку?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
			Копирование = Ответ = КодВозвратаДиалога.Да;
		Иначе
			Копирование = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(фОбъект.ПолноеИмяТаблицы);
	Если ирОбщий.ЛиМетаданныеСсылочногоОбъектаЛкс(ОбъектМД) Тогда
		Если ПравоДоступа("Добавление", ОбъектМД) Тогда
			Отбор = ДинамическийСписок.КомпоновщикНастроек.ПолучитьНастройки().Отбор;
			Если Копирование Тогда
				СтруктураОбъекта = ирОбщий.ОбъектБДПоКлючуЛкс(фОбъект.ПолноеИмяТаблицы, ЭлементыФормы.ДинамическийСписок.ТекущаяСтрока);
				СтруктураОбъекта = ирОбщий.КопияОбъектаБДЛкс(СтруктураОбъекта);
			Иначе
				ЭлементОтбораЭтоГруппа = ирОбщий.НайтиЭлементОтбораЛкс(Отбор, ИмяПоляЭтоГруппа,, Истина);
				ЭтоГруппа = Ложь
					Или ЭтоГруппа = Истина
					Или (Истина
						И ирОбщий.ЛиМетаданныеОбъектаСГруппамиЛкс(ОбъектМД)
						И ЭлементОтбораЭтоГруппа <> Неопределено
						И ЭлементОтбораЭтоГруппа.ПравоеЗначение = Истина);
				СтруктураОбъекта = ирОбщий.ОбъектБДПоКлючуЛкс(фОбъект.ПолноеИмяТаблицы, ЭтоГруппа);
			КонецЕсли; 
			ирОбщий.УстановитьЗначенияРеквизитовПоОтборуЛкс(СтруктураОбъекта.Данные, Отбор);
			ирОбщий.ОткрытьОбъектВРедактореОбъектаБДЛкс(СтруктураОбъекта);
		Иначе
			ирОбщий.ОткрытьОбъектВРедактореОбъектаБДЛкс(Новый(ирОбщий.ИмяТипаИзПолногоИмениТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы, "Ссылка")));
		КонецЕсли; 
	Иначе
		Отбор = ДинамическийСписок.КомпоновщикНастроек.ПолучитьНастройки().Отбор;
		КлючОбъекта = ирОбщий.СтруктураКлючаТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы, Ложь);
		Для Каждого КлючИЗначение Из КлючОбъекта Цикл
			Если Копирование Тогда
				КлючОбъекта[КлючИЗначение.Ключ] = ЭлементыФормы.ДинамическийСписок.ТекущаяСтрока[КлючИЗначение.Ключ];
			Иначе
				ЭлементОтбора = ирОбщий.НайтиЭлементОтбораЛкс(Отбор, КлючИЗначение.Ключ,, Истина);
				Если ЭлементОтбора <> Неопределено Тогда 
					КлючОбъекта[КлючИЗначение.Ключ] = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		СтруктураОбъекта = ирОбщий.ОбъектБДПоКлючуЛкс(фОбъект.ПолноеИмяТаблицы, КлючОбъекта);
		ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(СтруктураОбъекта);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныйРедакторОбъектаБДСтроки(Команда)
	
	Элементы.ФормаСвязанныйРедакторОбъектаБДСтроки.Пометка = Не Элементы.ФормаСвязанныйРедакторОбъектаБДСтроки.Пометка;
	Если Не Элементы.ФормаСвязанныйРедакторОбъектаБДСтроки.Пометка Тогда
		Возврат;
	КонецЕсли; 
	Если Элементы.ДинамическийСписок.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьСвязанныйРедакторОбъектаБДСтроки();
	//Сообщить("Закрепите окно связанного редактора БД через его контекстное меню на панели открытых окон");

КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ФормаСвязанныйРедакторОбъектаБДСтроки.Пометка Тогда
		ОткрытьСвязанныйРедакторОбъектаБДСтроки();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязанныйРедакторОбъектаБДСтроки()
	
	ирОбщий.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(Элементы.ДинамическийСписок, фОбъект.ПолноеИмяТаблицы,, Истина,,, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ЗакрытСвязанныйРедакторОбъектаБД" Тогда
		Элементы.ФормаСвязанныйРедакторОбъектаБДСтроки.Пометка = Ложь;
	КонецЕсли; 
	Если ИмяСобытия = "ЗаписанОбъект" Тогда
		Если ТипЗнч(Параметр) = Тип("Тип") Тогда
			ОбъектМД = Метаданные.НайтиПоТипу(Параметр);
		ИначеЕсли ТипЗнч(Параметр) = Тип("Строка") Тогда
			ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(Параметр);
		Иначе
			ОбъектМД = Метаданные.НайтиПоТипу(ТипЗнч(Параметр));
		КонецЕсли; 
		Если Ложь
			Или Параметр = Неопределено
			Или (Истина
				И ОбъектМД <> Неопределено 
				И ОбъектМД.ПолноеИмя() = фОбъект.ПолноеИмяТаблицы)
		Тогда
			Элементы.ДинамическийСписок.Обновить();
		КонецЕсли; 
	КонецЕсли; 
	ирОбщий.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВыбратьПоID(Команда)
	
	Если Не ЗначениеЗаполнено(фОбъект.ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.НайтиВыбратьСсылкуВДинамическомСпискеПоIDЛкс(Элементы.ДинамическийСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектМетаданных(Команда)
	
	ирОбщий.ОткрытьОбъектМетаданныхЛкс(фОбъект.ПолноеИмяТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СправкаМетаданного(Команда)
	
	ОткрытьСправку(ирКэш.ОбъектМДПоПолномуИмениЛкс(фОбъект.ПолноеИмяТаблицы));

КонецПроцедуры

&НаКлиенте
Процедура СоединяемыеРегистрыПриИзменении(Элемент)
	
	СохранитьНастройкиТаблицы();
	ОбновитьЗапросБД();    
	СоединняемыйРегистр = Элементы.СоединяемыеРегистры.ТекущиеДанные;
	Если СоединняемыйРегистр <> Неопределено И СоединняемыйРегистр.Соединить Тогда 
		Элементы.ДинамическийСписок.ТекущийЭлемент = Элементы["Регистр" + СоединняемыйРегистр.Имя].ПодчиненныеЭлементы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ирОбщий.ОтменитьФоновоеЗаданиеЛкс(фОбъект.ИДФоновогоЗадания);
	Если ЗавершениеРаботы <> Истина Тогда
		СохранитьНастройкиТаблицы();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ФиксированныйОтборОткрытие(Элемент, СтандартнаяОбработка)
	
	НастройкаСписка(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКоманднойПанели(Команда)

	// https://www.hostedredmine.com/issues/950113
	//ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Элементы.ФормаСтруктураКоманднойПанели);
	ПараметрыВызова = Новый Структура("Форма", ЭтаФорма);
	ПараметрыВызова.Вставить("КоманднаяПанель", Элементы.ФормаСтруктураКоманднойПанели);
	#Если Сервер И Не Сервер Тогда
		ОткрытьСтруктуруАктивнойФормыЛкс();
	#КонецЕсли
	ирОбщий.ПодключитьОбработчикОжиданияСПараметрамиЛкс("ОткрытьСтруктуруАктивнойФормыЛкс", ПараметрыВызова);

КонецПроцедуры

&НаКлиенте
Процедура фОбъектКоличествоСтрокВОбластиПоискаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	фОбъект.КоличествоСтрокВОбластиПоиска = ирОбщий.КоличествоСтрокВТаблицеМДЛкс(фОбъект.ПолноеИмяТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт

	//ирОбщий.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

&НаКлиенте
Функция ОткрытьРедакторОбъектаБДЕслиНужно()
	
	ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(фОбъект.ПолноеИмяТаблицы);
	Если Ложь
		//Или ирОбщий.ТипТаблицыБДЛкс(фОбъект.ПолноеИмяТаблицы) = "Внешняя"
		Или Не ирОбщий.ЛиДоступноРедактированиеВФормеОбъектаЛкс(ОбъектМД) 
	Тогда
		ИзменитьСтрокуЧерезРедакторОбъектаБД();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ДинамическийСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = ОткрытьРедакторОбъектаБДЕслиНужно();

КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокПриАктивизацииПоля(Элемент)
	
	Для Каждого Поле Из ирОбщий.ВсеПодчиненныеЭлементыФормыЛкс(Элементы.ДинамическийСписок) Цикл
		Если Поле = Элементы.ДинамическийСписок.ТекущийЭлемент Тогда
			Если Поле.ЦветФонаЗаголовка = Новый Цвет Тогда
				ирОбщий.ПрисвоитьЕслиНеРавноЛкс(Поле.ЦветФонаЗаголовка, ирОбщий.СмещенныйЦветЛкс(Поле.ЦветФонаЗаголовка, -30, -30, -30));
			КонецЕсли;
		Иначе
			ирОбщий.ПрисвоитьЕслиНеРавноЛкс(Поле.ЦветФонаЗаголовка, Новый Цвет);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСтроки(Команда)
	
	ирОбщий.ТабличноеПолеИлиТаблицаФормы_СравнитьСтрокиЛкс(ЭтаФорма, Элементы.ДинамическийСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектВместоОсновнойПриИзменении(Элемент)
	
	ирОбщий.СохранитьЗначениеЛкс("ирДинамическийСписок.ВместоОсновной." + фОбъект.ПолноеИмяТаблицы, фОбъект.ВместоОсновной);

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	ПроверитьЗапомнитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиОтборПриИзменении(Элемент)
	ПроверитьЗапомнитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Это событие оставлено для совместимости и по факту не вызывается. Поэтому работать оно не будет 
	// https://partners.v8.1c.ru/forum/topic/1150632
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент,
		ирОбщий.КлючИсторииВыбораЗначенияОтбораЛкс(фОбъект.ПолноеИмяТаблицы, Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока));
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, Элементы. КомпоновщикНастроекПользовательскиеНастройки, СтандартнаяОбработка,, Истина,, "Значение");
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиОтборПравоеЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Это событие оставлено для совместимости и по факту не вызывается. Поэтому работать оно не будет 
	// https://partners.v8.1c.ru/forum/topic/1150632
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент,
		ирОбщий.КлючИсторииВыбораЗначенияОтбораЛкс(фОбъект.ПолноеИмяТаблицы, Элементы.КомпоновщикНастроекПользовательскиеНастройкиОтбор.ТекущаяСтрока));
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = ирОбщий.СтруктураОтбораПоСвязямИПараметрамВыбораЛкс(Элемент);
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, Элементы.КомпоновщикНастроекПользовательскиеНастройкиОтбор, СтандартнаяОбработка,, Истина,, "ПравоеЗначение");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	// Это событие оставлено для совместимости и по факту не вызывается. Поэтому работать оно не будет 
	// https://partners.v8.1c.ru/forum/topic/1150632
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТаблицы(Команда)
	ирОбщий.ОткрытьГруппировкуТабличногоПоляЛкс(Элементы.ДинамическийСписок);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеРегистры(Команда)
	
	ирОбщий.УстановитьСвойствоВКоллекцииЛкс(СоединяемыеРегистры, "Соединить", Ложь);
	СохранитьНастройкиТаблицы();
	УстановитьОбъектМетаданных();
	
КонецПроцедуры

#КонецЕсли
